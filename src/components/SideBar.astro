---
import type { defaultLang, ui } from "../i18n/ui";
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from "../i18n/utils";

const options: {
  label: keyof (typeof ui)[typeof defaultLang];
  href: string;
  id: string;
}[] = [
  {
    id: "about",
    label: "nav.about",
    href: "#about",
  },
  {
    id: "experience",
    label: "nav.experience",
    href: "#experience",
  },
  {
    id: "projects",
    label: "nav.projects",
    href: "#projects",
  },
];

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<aside>
  <nav>
    <ul class="flex flex-col">
      {
        options.map((option, i) => {
          const isFirst = i === 0;
          const style = isFirst ? "selected" : "not-selected";
          const styleText = isFirst ? "selected-text" : "not-selected-text";

          return (
            <li class="group py-2.5 w-max">
              <a
                href={option.href}
                class="flex items-center justify-start gap-x-6"
              >
                <span
                  data-id-sidebar={option.id}
                  class={`h-px rounded-full ${style} duration-300 group-hover:w-20 group-hover:bg-slate-700 dark:group-hover:bg-slate-200`}
                />
                <span
                  class={`block text-xs font-semibold uppercase tracking-wider ${styleText} group-hover:text-slate-700 dark:group-hover:text-slate-200`}
                >
                  {t(option.label)}
                </span>
              </a>
            </li>
          );
        })
      }
    </ul>
  </nav>
</aside>

<style>
  .selected {
    /* "w-20",
          "bg-slate-700",
          "dark:bg-slate-200" */
    width: 5rem;
    background-color: theme("colors.slate.700");
    @apply dark:bg-slate-200;
  }
  .not-selected {
    /* "w-10",
          "bg-slate-300",
          "dark:bg-slate-700" */
    width: 2rem;
    background-color: theme("colors.slate.300");
    @apply dark:bg-slate-700;
  }

  .selected-text {
    color: theme("colors.slate.700");
    @apply dark:text-slate-200;
  }
  .not-selected-text {
    color: theme("colors.slate.300");
    @apply dark:text-slate-700;
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const sideBarItems = document.querySelectorAll("[data-id-sidebar]");
    let selectedId = sideBarItems?.[0]?.dataset.idSidebar ?? "";

    const sectionsElements = {
      about: document.getElementById("about"),
      experience: document.getElementById("experience"),
      projects: document.getElementById("projects"),
    };

    const sectionPositions = {};
    for (const id in sectionsElements) {
      sectionPositions[id] = sectionsElements[id].offsetTop;
    }

    window.addEventListener("scroll", () => {
      const scrollPosition = window.scrollY;
      const entries = Object.entries(sectionPositions);
      for (let i = entries.length - 1; i >= 0; i--) {
        const isInViewport = scrollPosition >= entries[i][1];
        if (isInViewport) {
          selectedId = entries[i][0];
          break;
        }
      }
      for (let i = 0; i < sideBarItems.length; i++) {
        const isSelected = selectedId === sideBarItems[i].dataset.idSidebar;
        if (!isSelected) {
          sideBarItems[i].classList.add("not-selected");
          sideBarItems[i].classList.remove("selected");

          const span = sideBarItems[i].nextElementSibling;
          span?.classList.add("not-selected-text");
          span?.classList.remove("selected-text");
        } else {
          sideBarItems[i].classList.add("selected");
          sideBarItems[i].classList.remove("not-selected");

          const span = sideBarItems[i].nextElementSibling;
          span?.classList.remove("not-selected-text");
          span?.classList.add("selected-text");
        }
      }
    });
  });
</script>
